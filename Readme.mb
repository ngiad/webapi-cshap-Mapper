create new project webapi :  dotnet new webapi
run app : dotnet watch run


// Service =>  tạo 1 file Service = interFace


// async => bất đồng bộ phải bọc task cho kiểu dữ liệu return
vd : 
        public async Task<List<Character>> GetAllCharecters()
        {
            return Characters;
        }

AutoMapper : dotnet add package AutoMapper.Extensions.Microsoft.DependencyInjection --version 12.0.0


Entity : dotnet add package Microsoft.EntityFrameworkCore --version 7.0.1
=> dotnet add package Microsoft.EntityFrameworkCore.SQLServer
=> dotnet add package Microsoft.EntityFrameworkCore.Design
=> 




// tool ef
dotnet tool install --global dotnet-ef


sau khi khoi tao dbcontext xog 

=>  tạo table trong database
tạo migrations 
 dotnet ef migrations add "ten colum can them "

update database
 dotnet ef database update


 *jwt 
   "AppSetting" : {
    "Token" : "My top secret key"
  },

  tạo trong appsetting


using :

using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;



=>  authen middleware

Program {
    builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme);
} 

dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer --version 7.0.1

using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;

builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(options => {
        options.TokenValidationParameters = new TokenValidationParameters{
            ValidateIssuerSigningKey = true,
            IssuerSigningKey = new SymmetricSecurityKey(System.Text.Encoding.UTF8
                .GetBytes(builder.Configuration.GetSection("AppSetting:Token").Value!)),
            ValidateIssuer = false,
            ValidateAudience = false
        };
    });



app.UseAuthentication();


// các router cần authen 

using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;


[Authorize]

khi dùng

dotnet add package Swashbuckle.AspNetCore.Filters

builder.Services.AddSwaggerGen(c => {
    c.AddSecurityDefinition("oauth2", new OpenApiSecurityScheme{
        Description = """Standard Authorization header using the Bearer scheme. Example: "bearer {token}" """,
        In = ParameterLocation.Header,
        Name = "Authorization",
        Type = SecuritySchemeType.ApiKey
    });

    c.OperationFilter<SecurityRequirementsOperationFilter>();
});

[AllowAnonymous] // không cần authen vẫn get đc
[HttpGet]
